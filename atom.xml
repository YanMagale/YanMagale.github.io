<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yan Magalhães</title>
  <subtitle>Web Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanmagalhaes.com.br/"/>
  <updated>2017-08-10T03:03:15.000Z</updated>
  <id>http://yanmagalhaes.com.br/</id>
  
  <author>
    <name>Yan Magalhães</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mudanças - Quando é a hora de mudar?</title>
    <link href="http://yanmagalhaes.com.br/quando-e-a-hora-de-mudar/"/>
    <id>http://yanmagalhaes.com.br/quando-e-a-hora-de-mudar/</id>
    <published>2017-08-05T13:00:00.000Z</published>
    <updated>2017-08-10T03:03:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quando é a hora de trocar de emprego e de arriscar uma mudança de ares? Existe algum momento certo para fazer isso? E sobre a stack que estou utilizando hoje, será que devo arriscar e seguir naquela outra tecnologia que eu tenho estudado, gostado e trabalhar com ela em alguma empresa que já a utiliza? Existe alguma coisa que possa nos ajudar a enxergar que é uma boa hora para realizar algum tipo de mudança em nossa carreira?<br><a id="more"></a></p>
<h1 id="O-inicio-de-tudo"><a href="#O-inicio-de-tudo" class="headerlink" title="O início de tudo"></a>O início de tudo</h1><p>Faaaalaaaa Gaaaleeeeraaaaa, quaaanto tempoooooo!! Sim, eu realmente estava com saudades.</p>
<p>Queria pedir desculpas por este tempo que fiquei sem fazer nenhum post, espero que durante  este post fique mais claro o motivo da ausência :D. Aconteceram uma série de acontecimentos e mudanças deste o meu <a href="/por-que-flux/">último post</a>, e de antemão, agradeço imensamente a cada um de vocês, leitores e leitoras, por todo o apoio e divulgação. Foi tão sensacional, tão sensacional, que eu acabei escrevendo este mesmo conteúdo para o blog do <a href="https://imasters.com.br/desenvolvimento/software/os-estados-do-flux-uma-nova-arquitetura/" target="_blank" rel="external">Imasters</a> :D :D :D. Foi uma felicidade e um acontecimento surreal, fiquei muito muito feliz… Muito em breve, teremos a parte 2 do arquivo da série sobre Flux! </p>
<p>Sem mais delongas, o post de hoje é um assunto que venho pensando a um bom tempo(muito tempo mesmo), e que promete(ou não) ser polêmico. Este com certeza foi o assunto que mais pensei em aborda-lo e de iniciar a escrita. O objetivo maior é que possamos criar um bate papo saudável onde todos possam compartilhar suas experiências sobre o tema. Então #Siimbora pro post.</p>
<p>Ainda falando um pouco sobre as coisas que aconteceram nos últimos 3 mêses, acabei tendo um pequeno susto com a saúde, então precisei me cuidar mais. Felizmente nada grave e já estou 100%. Uma outra coisa marcante que aconteceu, foi a minha mudança de emprego para o <a href="http://www.4yousee.com.br" target="_blank" rel="external">4YouSee Digital Signage</a>, uma empresa focada em Digital Out Of Home, um desafio totalmente novo na carreira e que tenho tido a oportunidade de aprender bastante. Além de uma mudança de empresa, também foi uma adição/mudança de stack: sempre atuei como full stack, e na parte do back-end eu sempre utilizei PHP. Agora, estou usando NodeJS. </p>
<p>Também participei e palestrei em alguns eventos neste período, como o GDG Tech Tour Caruaru e o Dev Weekend Diamatina (no momento que comecei a escrever este post estava viajando par a cidade de Diamantina :D :D). Em ambos os eventos, falei sobre o Polymer 2, então devo trazer conteúdos sobre ele aqui no blog também.</p>
<p>Neste período, pude participar como mentor no NodeSchoolBH e durante o almoço, percebi que a palavra <strong>mudança</strong> era uma constância no assunto entre as pessoas que estavam participando do evento (nesta época eu ja havia iniciado a mudança para o 4YouSee). Fosse mudança de emprego ou de stack, era algo bastante comum, muito mais do que eu imaginava, e conversamos muito sobre isto neste dia. Voltei para casa com esta palavra na cabeça, e começaram a me surgir alguns pensamentos: “….Nossa, eu troquei de emprego 2 vezes nos últimos 2 anos.”. E ao compartilhar este tipo de pensamento com meus amigos e colegas que desenvolvem software, percebi que eles também passavam por este processo de mudança, fosse de emprego ou de stack tecnológica, como uma certa frequência, e que isto não estava acontecendo apenas comigo. </p>
<p>Fiquei me perguntando: Por quê eu mudei de emprego 2 vezes num espaço de tempo de 2 anos? Por que essa mudança é tão frequente entre as pessoas? Existe alguma coisa que possamos levar em conta na hora de mudar? </p>
<p>Como não vi nada parecido, decidi então escrever sobre algumas coisas que eu vejo,vivencio,percebo e acredito que sejam relevantes(ou indícios) para que a mudança aconteça.</p>
<blockquote>
<p><strong>ATENÇÃO</strong>: Todas as ações descritas abaixo refletem apenas o <strong>meu</strong> pensamento, vivência e de acordo com as <strong>minhas</strong> experiências vividas até agora. Não leve nenhum dos pontos levantados como instransponíveis e verdade absoluta, não é o objetivo deste post cravar uma mensagem em pedra. Somente <em>você</em> pode determinar se é a sua hora de realizar alguma mudança ou não. </p>
</blockquote>
<h2 id="Amor-por-desafios"><a href="#Amor-por-desafios" class="headerlink" title="Amor por desafios"></a>Amor por desafios</h2><p>Esta pode ser uma frase um pouco clichê, mas ela é 100% verdadeira. Em muitas(ou quase todas) situações, a difícil tarefa de se criar software é destinada a resolução de problemas. Desenvolvedores amam resolver problemas, pois são tarefas que a pessoa sabe que vai precisar se dedicar, estar plenamente a par do problema, levantar quais são as melhores tecnologias e ferramentas para a solução daquele problema, para aí sim, fazer a melhor solução possível, que seja viável para a sua empresa e dentro do prazo esperado pelo cliente, para que aí sim, possa usufruir do sentimento único quando se consegue entregar uma solução para um determinado problema.</p>
<p>Quando uma tarefa, ou um conjunto delas, começa a ficar rotineiro e com um nível de exigência menor, automaticamente o desenvolvedor nao investirá a mesma energia e vonntade nesta tarefa, como antes. Ele vai “perdendo” o interesse, até que este seja completamente eliminado, chegando ao pior cenário, o da desmotivação. Se um desenvolvedor perdeu a motivação para se trabalhar naquele projeto, ele irá buscar algum tipo de mudança.</p>
<p>Passei por isso em uma das empresas que trabalhei e por muito tempo, eu estava fazendo sempre as mesmas coisas: os problemas já eram conhecidos, as features solicitadas eram parecidas com outras que foram feitas antes … não estava aprendendo, nem evoluindo. E por mais que eventuamente surgisse alguma demanda diferente, que me revigorasse novamente, em pouco tempo a rotina das tarefas já conhecidas retornava. Quando eu realmente tomei coragem para mudar e na primeira semana da nova empresa que eu havia ido àquela época, já tinha aprendido zilhões de coisas novas, e vi como os desafios eram maiores e motivadores, e como que cada tarefa feita entregava um valor significativo ao produto, decidi criar uma regra para mim mesmo: “Por mais legal e incrível que seja o lugar que você está, se você parou de aprender e evoluir, é hora de buscar um novo desafio”.</p>
<h2 id="Envolvimento-com-o-Produto-ou-projeto"><a href="#Envolvimento-com-o-Produto-ou-projeto" class="headerlink" title="Envolvimento com o Produto(ou projeto)"></a>Envolvimento com o Produto(ou projeto)</h2><p>Este quesito tem total relação com o seu perfil como desenvolvedor, e sua convergência com os tipos de empresas(projetos) que temos na nossa área: agências, software house ou produto. Identificar o tipo(s) que você mais se identifica será muito importante para o seu crescimento e evolução na carreira. Já trabalhei nos 3 tipos de empresa, hoje trabalho com produto e sou muito ligado a este tipo de cultura e projeto. Acho incrível como que a cada feature ou correção de bug entregue, o produto ficar cada vez mais melhor, mais engajável e atingindo os objetivos da empresa.</p>
<p>Todo desenvolvedor gosta de criar algo. That’s it. Porém, existe algo que potencializa e muito o seu poder de criação, é saber o “por quê” ela foi necessária. Quando alguma feature é solicitada, com certeza ele vai saber por quê ela se fez necessária, consequentemente irá querer opinar sobre uma melhor forma para fazê-la. E para isto ocorrer, o por quê daquela tarefa precisa estar muito bem alinhado. Em alguns cenários, infelizmente isto não acontece, devido a uma série de elementos, como o não completo alinhamento das evoluções do projeto, de alinhamento das tarefas com a expectativa do cliente, do não alinhamento do time com o progresso das tarefas, entre outros motivos.</p>
<p>Quando não se conhece completamente o cenário ou a importância, fico muito difícil de se oferecer uma solução ideal para o problema. Por consequência, aquela demanda sempre acaba retornando para a sua fila de atividades. Vivenciei muitas situações parecidas e era algo que sempre me fazia refletir, se o problema estava comigo, por não ter entendido de forma plena o que precisava ser feito, ou se o problema estava nos processos, na forma como as coisas aconteciam e como as demandas eram repassadas. Meu conselho para situações como esta: sempre converse com seu time, os líderes do projeto e com o cliente. Quanto mais inserido no contexto você estiver, melhor será a sua visão sobre o problema, consequentemente mais efetiva será a solução que você poderá desenvolver :D   </p>
<h2 id="Processos-bem-definidos-cultura"><a href="#Processos-bem-definidos-cultura" class="headerlink" title="Processos bem definidos(cultura)"></a>Processos bem definidos(cultura)</h2><p>Além do envolvimento com o produto, é importante estar por dentro de todos os processos da empresa onde você está, workflow do seu time e sobre todos os processos(ou cultura) que fazem com que as coisas aconteçam. Ninguém gosta de confusões ou de se terem partes do processo de trabalho que não estão bem preenchidas, perdidas ou não tão claras. A falta da clareza das tarefas, a não utilização de algum fluxo de atividade para criação de novas tarefas, a dificuldade de um novo integrante do time conseguir gerar valor num tempo hábil junto ao time e a falta de detalhamento das features no projeto podem ser exemplos que ilustrem esta situação.</p>
<p>Então, caso você identifique que algo não está tão legal, ou que poderia estar melhor, não hesite: <strong>converse</strong>. Sim, é uma habilidade extremamente entre os membros de uma equipe de desenvolvimento e criação de softwares, somente o diálogo traz clareza para todos a sua volta. Seu colega de time nunca irá saber que você está com alguma dificuldade, a menos que você o chame e reporte isso.</p>
<p>Viu alguma tecnologia/ferramenta/metodologia que pode ser interessante para sua equipe? Apresente a sua sugestão. Converse com seu líder e com sua equipe, faça uma pequena palestra mostrando os benefícios e o que traria de valor ao projeto ou ao produto. No caso de propor alguma mudança no processo, mostre como a sua sugestão poderia gerar valor a todos do seu time. Acha que seria muito legal adicionar VueJS, React, Polymer ou qualquer outra tecnologia ao produto? Faça uma <a href="https://pt.wikipedia.org/wiki/Prova_de_conceito" target="_blank" rel="external">PoC</a> e mostre aos seus colegas de equipe, mostrando as features daquela tecnologia e como elas seriam benéficas no seu projeto, quais problemas atuais vocês possuem e que seriam sanados adotando esta tecnologia.</p>
<h2 id="Loucos-por-Conhecimento"><a href="#Loucos-por-Conhecimento" class="headerlink" title="Loucos por Conhecimento"></a>Loucos por Conhecimento</h2><p>Um outro ponto que é 100% verdadeiro, e que eu não poderia deixar passar despercebido: desenvolvedores são loucos por aprendizado. São pessoas que a curiosidade e o desafio as movem. Ao chegar em casa após um longo dia de trabalho, ou até mesmo nos finais de semana, sempre procuramos, e gostamos, de <strong>investir</strong> nosso tempo livre vendo algum projeto open-source no Gihub, fazendo algum teste como alguma nova tecnologia/paradigma/ferramenta, criar projetos pessoais, ler algum post técnico, acompanhar as newsletters, ir a eventos … (Sim, eu usei a palavra “investir” ou invés de “gastar”, afinal, quando você dedica tempo a estes tipos de ações, você esta investindo em você mesmo :D).</p>
<p>De 2015 para cá, tenho estudado bastante sobre Javascript e todo o ecossistema desta incrível linguagem. No meu último emprego, na <a href="http://mlearn.com.br" target="_blank" rel="external">mLearn</a>, tive a oportunidade de trabalhar num projeto incrível em <a href="https://ionicframework.com/" target="_blank" rel="external">Ionic</a> e foi uma oportunidade surreal poder ter este contato diário com o <a href="https://angularjs.org/" target="_blank" rel="external">Angular</a> e tantas outras tecnologias do mundo Javascript. Isto me abriu a mente para um universo incrível e gigantesco, que não estava ao meu redor até então. A cada feature entregue percebia que estava conseguindo evoluir na linguagem, consequentemente ajudando o produto a ser melhor. </p>
<p>Estava decidido que queria muito evoluir neste ecossistema e na linguagem, mas para que isto acontecesse, precisaria ter mais foco,dedicação e contato com a linguagem, e uma das coisas que eu sei que poderiam me ajudar era utilizar Javascript também no backend, através do magnífico <a href="https://nodejs.org/en/" target="_blank" rel="external">NodeJS</a>, onde eu sempre havia utilizado PHP. Apesar de fazer alguns estudos e pequenos projetos pessoais com o NodeJS, eu sabia que somente iria poder aprender mais, se eu tivesse um contato diário com ele. </p>
<p>Decidi então que iria fazer o máximo de projetos possíveis com ele, conhecer mais sobre o ecossistema e o mercado, para que eu tivesse a oportunidade de utiliza-lo diariamente. Eis que esta oportunidade chegou, e este foi um dos motivos para realizar a mudança de emprego(e de stack) e ter ido para o 4YouSee, juntamente com o desafio de trabalhar num projeto totalmente diferente do que tudo o que eu ja havia feito.</p>
<blockquote>
<p>Caso você também esteja vivendo um momento parecido, e queira trabalhar com alguma nova tecnologia que esteja estudando, estas seriam as minhas dicas:</p>
</blockquote>
<ul>
<li>Converse com seu time e líderes sobre os benefícios daquela tecnologia e tente fazer um experimento com ela.</li>
<li>Faça projetos pessoais com ela.</li>
<li>Conheça as empresas que já a utilizam.</li>
<li>Estude bastante sobre ela.</li>
<li>Vivêncie o ecossistema: vá a eventos promovidos pela comunidade, fóruns, slacks…</li>
</ul>
<h2 id="Percebi-que-quero-mudar-e-agora"><a href="#Percebi-que-quero-mudar-e-agora" class="headerlink" title="Percebi que quero mudar, e agora?"></a>Percebi que quero mudar, e agora?</h2><p>Caso você também esteja cheio de perguntas e dúvidas, e quer efetuar algum tipo de mudança, listei algumas dicas que podem lhe ajudar nesta tarefa:</p>
<ul>
<li>Não tenha medo. That’s it.</li>
<li>Acredite em você e no seus instintos.</li>
<li>Arrisque. Tenha sempre o seguinte pensamento: <strong>O que de pior pode acontecer se eu fizer isso?</strong></li>
<li>Converse: não tenha medo de fazer sugestões e de propor o novo. </li>
<li>Caso queira mudar de empresa, ou tenha recebido uma proposta, procure conhecer mais sobre a empresa, sua cultura, o produto. Tente conversar com alguma pessoa e pergunte sobre como é trabalhar lá :D</li>
<li>Avalie o seu momento, sua vida e sempre pondere. Tenha sempre a clareza do <strong>motivo</strong> do por quê você esta realizando esta mudança.</li>
<li>Esteja sempre alinhado com seus objetivos e suas metas. Suas ações lhe levarão ao êxito.</li>
<li>Quer iniciar algum novo aprendizado ou algum novo hábito? Comece pequeno e seja constante.</li>
</ul>
<p>Agora a dica mais importante: Somente você pode decidir o que é melhor para você!</p>
<h2 id="Consideracoes-Finais"><a href="#Consideracoes-Finais" class="headerlink" title="Considerações Finais"></a>Considerações Finais</h2><p>Bem pessoal, este foi o post mais difícil que eu ja tive que fazer. Pensei muito se eu deveria ou não fazê-lo, mas fui incentivado pelo objetivo maior, que era transmitir um pouco do que eu já vivi e tentar ajudar as pessoas de alguma forma. Como disse no ínicio do post, nunca será o objetivo deste conteúdo ser uma bala de prata ou verdade absoluta. Apenas <strong>você</strong> é capaz de determinar se está na hora de fazer algum tipo de mudança em sua vida, em sua carreira. Vou ficar muito feliz se alguma coisa que eu tenha dito neste post tenha feito sentido para você e que lhe ajude em algo, para tomar algum tipo de decisão de realizar alguma mudança, seja de carreira, stack, atitudes, hábitos ou em sua vida.</p>
<p>Para finalizar, aquele momento altamente inspirador de cada post, onde deixo alguma mensagem de incentivo, sobre algo que li e que achei útil em algum momento E a frase deste post é:</p>
<p><strong>Planejar é muito importante, mas não vai tirar você do estado em que você está. Execução SIM.</strong><br>(Túlio Faria, <a href="https://www.devpleno.com/" target="_blank" rel="external">Canal DevPleno</a>).</p>
<p>OBS: Agradecimento especial ao amigo <a href="https://twitter.com/andreybleme" target="_blank" rel="external">Lucas Andrey</a> pelo apoio, força e incentivo para poder escrever este post :D</p>
<p>Gostou do post? Falei alguma besteira? Deixe sua opinião nos comentários, ela é muito importante. Compartilhe esse post com seus amigos nas redes sociais, e com os coleguinhas do trabalho :D</p>
]]></content>
    
    <summary type="html">
    
      true
    
    </summary>
    
    
      <category term="carreira" scheme="http://yanmagalhaes.com.br/tags/carreira/"/>
    
  </entry>
  
  <entry>
    <title>Os Estados do Flux:  Uma nova arquitetura</title>
    <link href="http://yanmagalhaes.com.br/por-que-flux/"/>
    <id>http://yanmagalhaes.com.br/por-que-flux/</id>
    <published>2017-04-04T20:49:29.000Z</published>
    <updated>2017-04-11T05:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flux? Redux? Mobx? Primeira parte da série sobre arquitetura Flux e suas implementações mais utilizadas.<br><a id="more"></a></p>
<h1 id="Primeiramente-um-Disclaimer"><a href="#Primeiramente-um-Disclaimer" class="headerlink" title="Primeiramente, um Disclaimer"></a>Primeiramente, um Disclaimer</h1><p>Queria primeiramente agradecer ao feedback de todos no primeiro post que escrevi aqui no blog. Recebi diversos feedbacks e incentivos para continuar com o projeto, e isso me deixa muito feliz. Também recebi inúmeras mensagens de pessoas que ficaram inspiradas com o texto e que também decidiram iniciar seus projetos pessoais. É impossível descrever a sensação, mas é uma alegria incrível!!</p>
<p>Segundo, queria pedir desculpas a vocês por ter demorado a escrever este primeiro post da serie sobre Flux, igual havia prometido no post anterior. Este mês de Março foi bem bem bem louco: além dos eventos do <a href="http://gdgbh.org/" target="_blank" rel="external">GDG BH</a>, palestrei nos meetups do <a href="https://www.meetup.com/pt-BR/FEMUG-MG/" target="_blank" rel="external">FEMUG MG</a>, <a href="https://www.meetup.com/pt-BR/reactbh/" target="_blank" rel="external">React BH</a> e no evento <a href="http://eventos.locaweb.com.br/eventos-anteriores/19o-encontro-locaweb-belo-horizonte/" target="_blank" rel="external">#19elw</a> aqui em BH \o/. Além de estudos pessoais, freelas e etc etc etc… mas enfim, estamos aqui firmes e fortes, então, #SIMBORA pro post :D</p>
<h2 id="Flux-Redux-Mobx-State-e-outra-sopa-de-letrinhas…"><a href="#Flux-Redux-Mobx-State-e-outra-sopa-de-letrinhas…" class="headerlink" title="Flux, Redux, Mobx, State e outra sopa de letrinhas…"></a>Flux, Redux, Mobx, State e outra sopa de letrinhas…</h2><p>Se você não viveu dentro de uma bolha, uma caverna ou ilha deserta totalmente desconectado das notícias nos últimos 2 anos(pelo menos), com certeza deve ter notado que a todo momento, é falado algo sobre <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a>, Single Direction Data Flow, <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>, <a href="https://mobx.js.org/" target="_blank" rel="external">Mobx</a>, gerenciamento de estado e assuntos similares, na comunidade front-end em geral, seja através de algum post, alguma palestra em algum evento ou de alguma nova biblioteca JS que saiu por aí.</p>
<p>Mas será mesmo que é importante discutirmos sobre isso? Você consegue falar sobre as diferenças de Flux e Redux? São a mesma coisa? Será que posso utilizar nos meus projetos? Será que meus projetos necessitam disso? Esta série de posts tem como objetivo responder a estas(e outras) perguntas :D.</p>
<p>Neste primeiro post da série, vamos entender por quê o Flux surgiu, os elementos da arquitetura e suas características.</p>
<h1 id="Uma-situacao-bem-comum"><a href="#Uma-situacao-bem-comum" class="headerlink" title="Uma situação bem comum"></a>Uma situação bem comum</h1><p>Antes de explicar ou trazer qualquer conceito, queria apresentar algumas situações, que nós desenvolvedores passamos inúmeras vezes em nossas rotinas de trabalho, seja quando criamos novas soluções ou apenas dando manutenção em algum projeto já existente:</p>
<ul>
<li>Quando temos que realizar algum tipo de alteração em um projeto,  perdemos boa parte do tempo entendendo como o fluxo da aplicação funciona, a arquitetura do projeto e toda a estrutura de código, do que de fato implementando a funcionalidade que queríamos fazer.</li>
<li>Quando vamos corrigir algum bug, e percebemos que por alguma razão, aquela ação no sistema acaba gerando uma sequência de ações em cascata na aplicação.</li>
<li>Quando vamos implantar alguma feature, e não temos noção de que vamos gerar mudanças em outras partes do sistema.</li>
</ul>
<p>Tenho certeza de que alguma destas situações já aconteceu(ou acontece) com você também. O caso ainda mais grave, é quando ocorrem mudanças que acabam gerando um estado inconsistente na aplicação. Podemos acabar mostrando alguma informação errada, não concluir alguma ação que o usuário queria fazer, ou realizar uma ação diferente da que o usuário solicitou … são infinitas as possibilidades.</p>
<p>E será que precisa ser sempre assim? Como realizar alterações em nossa aplicação, sem produzir estados inconsistentes? Existe uma forma melhor para conseguirmos entender rapidamente a estrutura do projeto? É possível gerenciar os estados da aplicaçao e torna-los previsível?</p>
<h1 id="Um-fato-inquestionavel"><a href="#Um-fato-inquestionavel" class="headerlink" title="Um fato inquestionável"></a>Um fato inquestionável</h1><p>Tudo isso sobre esta precaução em não gerar comportamentos indesejáveis, ou dificuldade em manutenção da aplicação, se explica muito porque desenvolvolver software é complexo. Seja ele um hello world a um aplicativo de redes sociais, existem inúmeras variáveis e fatores em volta desta atividade: entendimento do problema a ser resolvido; planejar a estrutura de dados; criar uma estrutura de código que possibilite uma evolução do sistema; escalabilidade; performance; experiência do usuário; lidar com prazos e demandas; a própria complexidade da implementação, entre outros.</p>
<p>Toda essa complexidade, que antes era mais presente no back-end, também pode ser notada do lado do front-end. Com o advento das aplicações do tipo <a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="external">SPA</a> e outras evoluções do HTML5, CSS e JS, temos muito mais coisas para nos preopupar em nossa aplicação: Routing, interação do usuário com a aplicação, interação com API, prover dados offline e a posterior sincronização desdes dados…</p>
<p>Tudo isso altera o estado da aplicação: o que ela vai apresentar ao usuário e como ela vai se comportar mediante alguma ação.</p>
<h1 id="Padroes-de-Software-e-Arquitetura"><a href="#Padroes-de-Software-e-Arquitetura" class="headerlink" title="Padrões de Software e Arquitetura"></a>Padrões de Software e Arquitetura</h1><p>Para manter uma aplicação com manutenção facilitada, com escabilidade, com códigos bem escritos e de fácil entendimento para todos os colegas do seu time, vamos pensar em muitos princípios de engenharia de software e padrões de arquitetura. Sem dúvida alguma, o padrão de arquitetura mais conhecido e utilizado em muitos projetos, é o MVC.</p>
<p>Tenho certeza que você ja viu, tem noção ou trabalha em projetos que utilizam este modelo. O modelo MVC(Model-View-Controler) foi criado na década de 1970, com a proposta de separação da interface do usuário, com as regras de negócio do sistema. Repare que, nesta época, não se existia tanta interação com a interface, ao qual temos hoje(nem preciso mencionar as interações do usuário via mobile neh?!), e ainda assim, já existia este grande conceito de <strong>separação das responsibilidades</strong>. Caso você nunca tenha tido contato com o MVC, ou não saiba o que é isso, <a href="https://developer.chrome.com/apps/app_frameworks" target="_blank" rel="external">este</a> post lhe dará plenos entendimentos, mas, apenas para entendimento deste post, irei fazer uma breve explicação dos elementos do modelo:</p>
<ul>
<li>A camada Model: É a camada que possui todas as regras de negócio da aplicação, aonde devem ficar todo o conjunto de regras de acesso aos dados da aplicação, representando assim às informações(ou dados) da aplicação.Ela não deve ter conhecimento de quais serão as interfaces que serão atualizadas (as views), ele apenas deve possuir acesso aos dados da aplicação e fornecer meios para que o Controller tenha acesso a eles.</li>
<li>A camada View: É a camada de apresentação, é quem deverá exibir os dados da camada Model, ao usuário final. É esta camada que possibilita a interação do usuário com todo o sistema,possibilitando a entrada e a saída de dados, permitindo a visualização das respostas geradas pelo sistema. A View deve ser reflexo do estado do modelo, então caso ocorra alguma mudança nos dados do modelo, este deverá notificar as suas respectivas views de alguma forma, para que elas possam exibir os novos dados do modelo. As views não devem conter códigos relacionados á lógica de negócios, elas somente devem se preocupar com a apresentação dos dados contidos no model.</li>
<li>A camada Controler: É a camada de lógica, é quem faz a ligação da camada Model, com a camada View. É responsável por fazer as manipulações dos dados da camada model e enviá-los para a camada view. Sendo assim, ele gerencia o envio de requisições feitas entre a view e o model. Ela define todo o comportamento e funcionamento da aplicação, quem interpreta as ações feitas pelos usuários da aplicação.</li>
</ul>
<p><img src="https://developer.chrome.com/static/images/mvc.png" alt="O padrão MVC"><br><strong>Imagem disponível em <a href="https://developer.chrome.com/apps/app_frameworks" target="_blank" rel="external">https://developer.chrome.com/apps/app_frameworks</a></strong></p>
<p>Mesmo tendo sido criado mesmo antes da popularização da Web, existem alguns fatores que o tornaram marcantes e fez este modelo ser tão consagrado. Alguns deles, por exemplo:</p>
<ul>
<li>Separação de responsibilidades: conceito este que utilizamos a todo momento, cada coisa deve ser responsável apenas por saber resolver aquela parte do problema.</li>
<li>Altamente Fléxivel: o modelo permite criar variações em sua estrutura, como podemos citar o <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="external">MVP</a> e o <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="external">MVVM</a>.</li>
<li>Facil implementação: todas as linguagens oferecem algum meio, seja nativamente ou por bibliotecas, para se trabalhar com ele.</li>
<li>Desenvolvimento do software de forma paralela: Por causa de sua estrutura, ele trouxe a possibilidade de uma parte da equipe trabalhar na parte de interface, enquanto outro membro cuidava da logíca e regras de negócio.</li>
</ul>
<p>A medida com que as aplicações Front-End se tornaram mais complexas(devido ao advento das SPAs e da propria evolução do HTML5, CSS e JS), houve a necessidade de adotarmos padrões para melhor organização do projeto, e a maioria das bibliotecas ou frameworks tornaram possível a utilização do MVC do lado do front-end(já que antes somente era possível em alguma linguagem server side). Podemos citar aqui como exemplo, o <a href="https://angularjs.org/" target="_blank" rel="external">Angular JS</a>, <a href="http://backbonejs.org/" target="_blank" rel="external">Backbone</a> e o <a href="https://emberjs.com/" target="_blank" rel="external">Ember JS</a>.</p>
<h2 id="Algumas-Diferencas-no-Front-End"><a href="#Algumas-Diferencas-no-Front-End" class="headerlink" title="Algumas Diferenças no Front End"></a>Algumas Diferenças no Front End</h2><p>Contudo, existem algumas diferenças, em como a aplicação funcionava internamente com a arquitetura MVC. Algumas delas são:</p>
<ul>
<li>O tão famoso <em>Two Way Data Binding</em>(que é o efeito de você poder ver o valor atual de um elemento, a medida que o usuário digita o valor desejado), só funciona porque model acaba notificando a view sobre as mudanças daquele valor, ou seja, cria-se um caminho <strong>bidirecional</strong>, onde o model notifica a view e vice-versa.</li>
<li>As ações na view podem acontecer por vários pontos, não existe um único ponto de entrada(como um router por exemplo), onde toda a ação dentro do sistema se inicia passando por aquele único local.</li>
</ul>
<p>Além disso, um dos elementos mais notórios, em qualquer aplicação MVC, é que a medida que a aplicação cresce e mais camadas são adicionadas, demora-se muito tempo para se estabelecer um fluxo de uma determinada ação.</p>
<p><img src="http://fluxxor.com/images/mvc-complex.png" alt="Uma aplicação MVC mais complexa"><br><strong>Imagem disponível em <a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">http://fluxxor.com/what-is-flux.html</a></strong></p>
<p>Tenho certeza de que você levou um certo tempo para entender como a aplicação da imagem acima funcionava. E isto se deve ao próprio funcionamento do modelo. Quanto mais a aplicação cresce, e mais camadas são adicionadas,demora-se um certo tempo para o entendimento do sistema.</p>
<p>Não somente isso, a medida que a aplicação cresce e fica mais complexa, temos a necessidade de se adicionar mais camadas ao modelo. Como consequência, ao adicionar mais e mais camadas, torna-se difícil mapear as ações realizadas na aplicação. Imagine-se corrigindo algum bug cuja estrutura da aplicação seja como a imagem abaixo:</p>
<p><img src="https://cdn.infoq.com/statics_s2_20170406-0549/resource/news/2014/05/facebook-mvc-flux/en/resources/flux-react-mvc.png" alt="Fluxo Bidirecional e mudanças em Cascata"><br><strong>Imagem disponível em <a href="https://www.infoq.com/news/2014/05/facebook-mvc-flux" target="_blank" rel="external">https://www.infoq.com/news/2014/05/facebook-mvc-flux</a></strong></p>
<p>Como é difícil visualizar o fluxo da aplicação, e por consequência difícil mapear as ações realizadas na aplicação, é bastante complicado de se reproduzir alguns problemas e comportamentos. Principalmente quando existem ações que geram mudanças em cascata no seu projeto, ou seja, uma ação em algum ponto do sistema, acaba por atualizar e modificar diversos dados em outra parte do sistema, que gera uma nova visualização destes dados para o seu usuário. Neste contexto, é muito difícil prever como a aplicação irá se comportar mediante alguma ação realizada. Logo, a sua aplicação torna-se <strong>imprevisível</strong>. Em uma aplicação assim, é dificil reproduzir comportamentos, testar, implantar novas funcionalidades e corrigir problemas. Então, como fazer para levar a aplicação ao “próximo nível”, tornando-a mais previsível?</p>
<p>Todas estas situações relatadas foram observadas pela comunidade, e o Facebook observou estes problemas em sua aplicação de chat: eles notificavam os seus usuários de que existiam novas mensagens, porém quando o usuário clicava sobre o ícone de notificações, não existia nenhuma nova mensagem a ser lida.</p>
<p>Tendo identificado todos estes problemas, e com o mindset de que eles queriam que todas as aplicações fossem mais fácil de serem entendidas por seus desenvolvedores, para que eles pudessem criar features de uma forma mais rápida, e que o fluxo da aplicação fosse rapidamente entendido, decidiram apostar em um novo modelo de arquitetura, que tornasse a aplicação mais previsível. Nasce então o tão famoso Flux \o/</p>
<p><a href="https://www.youtube.com/watch?v=nYkdrAPrdcw&amp;t=6s" target="_blank" rel="external">Neste</a> vídeo, você verá a palestra apresenta pelo time de engenharia do Facebook reportando estes problemas e apresentando a arquitetura Flux, entre outras novidades.</p>
<h1 id="Flux-O-que-e-isso"><a href="#Flux-O-que-e-isso" class="headerlink" title="Flux: O que é isso?"></a>Flux: O que é isso?</h1><p>Apresentado por <a href="https://twitter.com/jingc" target="_blank" rel="external">Jing Chen</a>(considerada a criada do Flux), na conferência do time de engenharia do Facebook, a nova arquitetura era fundamenta no conceito de <em>Single Direction Data Flow</em>, que traduzindo para o português, Fluxo Único de Dados. Sua arquitetura é baseada nos seguintes elementos: <strong><em>Action, Dispatcher, Store e View</em></strong>.  </p>
<p><img src="https://facebook.github.io/flux/img/flux-simple-f8-diagram-explained-1300w.png" alt="A Arquitetura Flux"><br><strong>Imagem disponível em <a href="https://facebook.github.io/flux/docs/in-depth-overview.html#content" target="_blank" rel="external">https://facebook.github.io/flux/docs/in-depth-overview.html#content</a></strong></p>
<p>Apesar de fazerem parte da arquitetura, o Dispatcher, a Store e a View são partes totalmente independentes, que por sua vez trabalham com dados de entrada e<br>saídas distintos. Para explicar cada um dos elementos, vamos imaginar a seguinte aplicação:</p>
<blockquote>
<p>Queremos criar um contador: teremos na nossa interface o seu número(valor) e dois botões,um para adicionar valor ao contador,e outro para retirar valor do contador.</p>
</blockquote>
<ul>
<li><p>As Views são responsáveis por permitir a interação do usuário com a aplicação, e por mostrar a ele o estado atual de nossa aplicação(em nosso exemplo, nossa view irá exibir o valor do contador, que inicialmente pode ser o valor zero, e os dois botões, que irão adicionar e retirar valores do contador).</p>
</li>
<li><p>As Actions são as ações que o usuário realiza na interface(Views). Quando é solicitada alguma ação, elas são representadas por objetos,que apenas possuem as novas informações a serem salvas pela aplicação(no nosso exemplo, a action conteria o tipo da ação realziada: ADICIONAR_AO_CONTADOR ou RETIRAR_DO_CONTADOR, e o valor a ser adicionado, que neste exemplo, será sempre o valor 1).</p>
</li>
</ul>
<ul>
<li><p>O dispatcher simplesmente se encarrega de enviar todas as ações para todas as Stores da aplicação. Ele não possui nenhum conhecimento sobre as regras de negócio e como atualizar o valor contido nas Stores.</p>
</li>
<li><p>Cada Store é responsável por um domínio da aplicação e somente se atualizam mediante em resposta às actions. É nela que esta contida toda a lógica de implementação das actions(em nossa aplicação, aqui estará contida a lógica para adicionar um valor ao nosso contador, caso a action disparada seja do tipo ADICIONAR_AO_CONTADOR, como também a lógica de retirar um valor do contador, caso a action disparada seja do tipo RETIRAR_DO_CONTADOR). Após a realização dos algoritmos de cada ação, nossa aplicação passa a ter um <em>novo estado</em>. Este novo estado(que na nossa aplicação, seria o novo valor do contador) passa a ser então renderizado na view. Caso aconteça uma nova action na view(no nosso exemplo, adicionar ou retirar um elemento do contador), todo o fluxo se repete.</p>
</li>
</ul>
<p>Sei o que você provavelmente esta pensando: <em>aah Yan, mas este exemplo é simples. Se a aplicação crescer e eu adicionar novas views e novas stores, terei as mesmas situações permitidas pelo MVC</em></p>
<p><img src="http://fluxxor.com/images/flux-complex.png" alt="Aplicação Flux um pouco mais complexa"><br><strong>Imagem disponível em <a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="external">http://fluxxor.com/what-is-flux.html</a></strong></p>
<p>Ou seja, mesmo adicionando novos elementos, o princípio do Single Direction Data Flow se manteve. Como isso é possível? Algumas razões:</p>
<ul>
<li>O Dispatcher é único para toda a aplicação: só existe um único elemento responsável por receber as actions realizadas nas views e dispará-las para as stores da aplicação.</li>
<li>Toda e qualquer mudança no estado da aplicação somente pode ser realizada através de uma action.</li>
</ul>
<h2 id="Algumas-Caracteristicas"><a href="#Algumas-Caracteristicas" class="headerlink" title="Algumas Características"></a>Algumas Características</h2><p>Além dos itens comentados acima, algumas características da arquitetura flux:</p>
<ul>
<li>Fluxo único de dados: é o maior princípio da arquitetura.</li>
<li>Sem alterações em cascata: as actions são únicas, e a cada action realizada, é gerado um novo estado na aplicação.</li>
<li>Previsível: é muito fácil saber qual será o estado da aplicação, mediante uma ação realizada. Basta colocarmos a aplicação  em um estado “X”, realizar a ação desejada, e conferimos se ela levou a aplicação ao estado “Y”. Logo, a aplicação é muito mais fácil de ser testada.</li>
<li>Ações mais semânticas e descritivas: como todas as actions possuem um tipo, é muito fácil identificar quando a action é chamada, e qual tipo de mudança ela causa no estado. O código fica muito mais explícito.</li>
<li>Toda a lógica esta concentrada em um único local, nas stores(em nossa aplicação de contador, por exemplo, caso existisse algum bug ao adicionar valor ao contador, nos bastaria ir a Store cuja action ADICIONAR_AO_CONTADOR estivesse sido implementada).</li>
<li>Pode ser usado em pequenas e grandes aplicações.</li>
<li>View != REACT: Apesar de ter sido criado pelo Facebook e todos os exemplos da documentação serem em <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>, você pode usar qualquer outra biblioteca ou framework em sua view, como <a href="https://angularjs.org/" target="_blank" rel="external">Angular</a>, <a href="https://www.polymer-project.org/" target="_blank" rel="external">Polymer</a> (que em breve teremos posts dele aqui no blog \o/), <a href="https://vuejs.org/" target="_blank" rel="external">VueJS</a> e outros.</li>
</ul>
<p>Ufaa, muita coisa não? Este primeiro post acabando ficando um pouco extenso, mas acredito que avançamos bastante no entendimento deste novo conceito. Entender como a arquitetura Flux funciona é a base para se trabalhar com as bibliotecas que a implementam, seja o Redux, Mobx ou qualquer outra biblioteca de container de estados.</p>
<p>No próximo post da série, teremos um review de como a arquitetura Flux funciona e vamos ver uma aplicação utlizando a arquitetura. Também veremos como foi a adoção da comunidade a esta arquitetura e vamos ver um exemplo da primeira biblioteca que foi bastante utilizada para gerenciamento de estados: o <a href="http://alt.js.org/" target="_blank" rel="external">Alt JS</a>.</p>
<p>Para finalizar, como havia mencionado no outro post, vou procurar sempre deixar alguma mensagem de incentivo, sobre algo que li e que achei útil em algum momento, seja um livro ou alguma frase de algum autor.</p>
<p><strong>Não caia na Síndrome da Gabriela: eu nasci assim, eu cresci assim, eu vou ser sempre assim. Você tem o poder de controlar a sua vida.</strong><br>(Livro Geração de Valor, primeira edição).</p>
<p>Gostou do post? Falei alguma besteira? Deixe sua opinião nos comentários, ela é muito importante. Compartilhe esse post com seus amigos nas redes sociais, e com os coleguinhas do trabalho :D</p>
]]></content>
    
    <summary type="html">
    
      true
    
    </summary>
    
    
      <category term="flux" scheme="http://yanmagalhaes.com.br/tags/flux/"/>
    
      <category term="arquitetura" scheme="http://yanmagalhaes.com.br/tags/arquitetura/"/>
    
  </entry>
  
  <entry>
    <title>O Importante é Começar</title>
    <link href="http://yanmagalhaes.com.br/o-importante-e-comecar/"/>
    <id>http://yanmagalhaes.com.br/o-importante-e-comecar/</id>
    <published>2017-03-01T14:42:08.000Z</published>
    <updated>2017-03-02T03:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Faaaaaaaaaaaaaaalaaaaaaa Pessoooaaaaaaal. Hoje é um dia muito feliz para mim,<br>e espero que seja para vocês também. Finalmente consegui iniciar o projeto do blog, que estava adiando por muitos e muitos tempos. Mas como diz o bom e velho ditado, antes tarde do que nunca :D</p>
<a id="more"></a>
<h1 id="Antes-de-mais-nada"><a href="#Antes-de-mais-nada" class="headerlink" title="Antes de mais nada"></a>Antes de mais nada</h1><p>Agradeço desde já a sua vinda ao blog \o/. Espero que goste dos conteúdos que irei postar, e que este projeto possa de algum modo, lhe ajudar a ser um desenvolvedor melhor, ou lhe motivar a estudar, a criar seus projetos pessoais e etc.</p>
<p>Me apresentando um pouco, me chamo Yan Magalhães(narigomon para alguns mais ousados), tenho 22 anos (quase 23), nasci e moro em Belo Horizonte (uai). Gosto bastante da Web em geral, tanto da parte de front-end, como do back-end. Ultimamente tenho atuado mais como front-end, principalmente com JS. Gosto muito de participar de comunidade de desenvolvedores, ir a eventos e de projetos open source &lt;3</p>
<p>Acho que por hora é uma boa introdução. Se quiser conhecer um pouco mais sobre mim, acesse a página do <a href="http://yanmagalhaes.com.br/about/">About</a>.</p>
<p>Agora vamos ver como começou esse projeto :D</p>
<h1 id="Como-isso-tudo-comecou"><a href="#Como-isso-tudo-comecou" class="headerlink" title="Como isso tudo começou?"></a>Como isso tudo começou?</h1><p>Toda essa ideia maluca começou em 2015. Eu costumo ter o hábito de em todo evento que eu vou, tomar algumas notas sobre as palestras, links que foram passados, para que eu possa estudar em algum momento, e também para compartilhar com os amigos que por algum motivo, não puderam ir. Eu geralmente vou aos eventos com meus amigos, mas em 2015, o primeiro evento do ano eu havia ido sozinho. O evento era o 17º Encontro Locaweb. Decidi meio que num ar inspirador, pelas boas energias que todo evento de desenvolvimento traz, que iria anotar tudo o que poderia sobre o evento e compartilhar o conhecimento daquele dia em um <a href="https://medium.com/@yanmagale/um-resumo-sobre-o-17%C2%BA-encontro-locaweb-e9790563c6c1#.53v7y2z0k" target="_blank" rel="external">post</a> no <a href="https://medium.com" target="_blank" rel="external">Medium</a>.</p>
<p>Ainda não tinha certeza se eu havia conseguido passar a passagem, ou se eu escrevia bem, mas o fiz mesmo assim. Eu mal tinha experiência na área, e ja estava escrevendo um post. Mas mesmo assim, mesmo com todas essas dúvidas, me enchi de coragem e fiz :D<br>Recebi alguns feedbacks postivios e acabei tomando gosto por isso. No final daquele mesmo ano, eu ja estava mais envolvido com as atividades do <a href="http://gdgbh.org/" target="_blank" rel="external">GDGBH</a>, e acabei tendo a oportunidade de organizar um evento. Eu nunca havia feito isso. Decidi compartilhar tudo o que vivi e aprendi em um <a href="https://medium.com/gdg-bh/participa%C3%A7%C3%A3o-na-comunidade-organizando-eventos-parte-1-f6561c4f04f3#.qadzbbvl9" target="_blank" rel="external">post</a>. Foi a confirmação de que eu poderia continuar investindo nisso :D  </p>
<p>Veio o ano de 2016 e fiquei um tempo sem escrever, muito por conta das minhas outras atividades, fosse pela faculdade(afinal foi ano do TCC), ou por estar organizando eventos, ou palestrando, ou simplesmente fazendo outras coisas, afinal, também temos que ter um tempo para nós não é mesmo?! Mas havia decidido que queria continuar com o projeto e comprei o domínio, que por sorte estava disponível \o/. Levei um certo tempo customizando da forma que queria e finalmente decidi lançar para o mundo :D</p>
<h1 id="A-stack-utilizada-no-blog"><a href="#A-stack-utilizada-no-blog" class="headerlink" title="A stack utilizada no blog"></a>A stack utilizada no blog</h1><p>Não serei muito extenso nessa sessão(posso fazer um post sobre isso se quiserem), mas a ideia do blog também partia do princípio para que eu pudesse experimentar tecnologias novas, que eu ainda não tivesse algum contato, ou simplemente alguma tecnologia que eu quisesse aperfeiçoar. Ultimamente(nos ultimos 2 anos) meu interesse por Javascript cresceu absurdamente. Tanto que hoje (segundo o wakatime :D) quase 70% dos códigos que escrevo é em JS. Sendo assim, eu queria utilizar algum framework em JS, que pudesse servir de gerador estático de conteúdo, e que de alguma forma eu pudesse me envolver mais com o projeto e evoluir na linguagem. Por ja ter algum ecossistema mais fomentado, plugins e uma comunidade envolvida, acabei escolhendo o <a href="https://hexo.io" target="_blank" rel="external">Hexo.JS</a> (e estou feliz com a escolha :D). Caso você já tenha em mente fazer um blog, e se você gostaria de ver um pouco mais sobre o Hexo, o <a href="https://woliveiras.com.br/posts/Migrando-de-Wordpress-para-Hexo/" target="_blank" rel="external">William Oliveira</a> e o <a href="http://blog.da2k.com.br/2014/01/05/hexo-criando-um-blog-ao-estilo-miojo/" target="_blank" rel="external">Fernando Daciuk</a> tem otimos posts no blog deles \o/</p>
<p>Além disso, tive uma grande dificuldade e dúvida em saber se nesse primeiro momento faria um customização toda do zero, ou se partiria de alguma base, dos temas já disponíveis no site do Hexo. Decidi escolher um tema por tornar mais rápido o processo de desenvolvimento e acabei optando pelo tema <a href="https://github.com/twoyao/beautiful-hexo" target="_blank" rel="external">beautiful-hexo</a>, pois ele se mostrava o mais customizável, e também por ter seus arquivos de layout todos em Jade(hoje chamado de Pug), que até então não havia feito nada com ele. Ainda quero aproveitar um bom tempo com este tema, fazendo algumas customizações que eu acho que podem funcionar, mas futuramente irei fazer o meu próprio tema.</p>
<h1 id="O-que-vou-escrever"><a href="#O-que-vou-escrever" class="headerlink" title="O que vou escrever?"></a>O que vou escrever?</h1><p>Não vou prometer nenhum ritmo de escrita inicialmente. Irei fazer desde posts únicos, sobre algum tema específico, até algumas séries sobre alguns assuntos, de forma a apresentar uma abordagem mais completa, da inicial a um pouco mais avançada. Aliás, fique a vontade para enviar sua sugestão sobre qual conteúdo você gostaria de ver aqui :D</p>
<p>Além de conteúdos relacionados as tecnologias que utilizo no dia-a-dia, vou escrever também sobre as coisas que eu estiver aprendendo, algum experimento e demais temas que estiverem relacionados a essa vida de Desenvolvedor :D</p>
<p>De tecnologias, pretendo escrever sobre Javascript(seja algo relacionado a linguagem ou alguma biblioteca como React, ou algum framework como Angular), desenvolvimento mobile usando tecnologias front-end, e também coisas relacionadas a back-end, como por exemplo, Laravel &lt;3</p>
<p>Vou escrever também sobre os eventos que eu tiver participado, procurando trazer um review de tudo o que aconteceu e alguns links interessantes daquele evento, e sobre comunidades de forma geral :D. Também escreverei sobre coisas não técnicas, que de algum modo possam lhe ajudar a evoluir \o/</p>
<h1 id="Qual-e-a-sua-desculpa"><a href="#Qual-e-a-sua-desculpa" class="headerlink" title="Qual é a sua desculpa?"></a>Qual é a sua desculpa?</h1><p>Bem, acho que escrevi muito para um primeiro post. Os próximos posts serão uma série sobre a arquitetura Flux(que foi o tema do meu TCC), e a sua implementação mais conhecida, o <a href="http://redux.js.org/docs/introduction/" target="_blank" rel="external">Redux</a>. Acabou que não mencionei o principal motivo para eu ter tido um gás maior nesse feriado, para terminar o projeto e começar a escrever. (Não, não foi o começo do ano de todo brasileiro depois do carnal kkk)</p>
<p>Na semana passada, eu vi um vídeo do Guanabara, do <a href="https://www.youtube.com/channel/UCrWvhVmt0Qac3HgsjQK62FQ" target="_blank" rel="external">Curso em Vídeo</a>, justamente com o tema <a href="https://www.youtube.com/watch?v=JaDT1YNSuo4" target="_blank" rel="external">Qual é a sua desculpa?</a>.</p>
<p>De uma forma bem resumida, o vídeo conta a história de um garoto de Camarões, onde o seu país esta em uma guerra civil, sem internet, e que mesmo assim, o garoto persistiu e continuava estudando sobre programação. Ele participou de uma competição de programação criada pelo Google e ele foi um dos vencedores. Como prêmio, ele irá visitar a sede dos escritórios e conhecer todo o time de engenharia. Ele ainda confirmou em uma entrevista que irá seguir na área e que quer iniciar uma graduação.</p>
<p>O que mais me tocou nessa história é o fato de que sempre, nós estarmos sempre inventando algum tipo de desculpa, para nós mesmos, para adiar alguma coisa que queremos fazer. Ficamos com medo do que o outro vai achar ao nosso respeito, ficamos com medo de não sermos bons o suficiente, culpamos a sociedade, alguem do nosso grupo familiar, a falta de tempo, a falta de oportunidades……</p>
<p>Enfim, a lista de desculpas é grande, mas a grande verdade, é que a única culpa para não iniciarmos nossos projetos é unicamente NOSSA. Então, se você deseja aprender uma nova linguagem, ou melhorar no inglês, ou aprender alguma nova tecnologia, ou criar algum projeto open source, ou evoluir na carreira … Nada disso irá acontecer, se VOCÊ não tomar as rédias, e começar a ter AÇÕES para conseguir seu objetivo. SO DEPENDE ÚNICA E EXCLUSIVAMENTE DE VOCÊ.</p>
<p>Espero que este post possa ter lhe ajudado de alguma forma a dar aquele ânimo que você precisava e continue acompanhando os próximos posts :D</p>
<p>Para finalizar, vou procurar sempre deixar alguma mensagem de incentivo, ou algo que li e que achei útil em algum momento.</p>
<p><strong>Se falta de tempo realmente fosse uma justificativa para você não tirar<br>os seus projetos do papel, somente os desocupados teriam sucesso.</strong><br>(Livro Geração de Valor, primeira edição).</p>
<p>Gostou do post? Falei alguma besteira? Deixe sua opinião nos comentários, ela é muito importante. Compartilhe esse post com seus amigos nas redes sociais, e com os coleguinhas do trabalho :D</p>
]]></content>
    
    <summary type="html">
    
      true
    
    </summary>
    
    
      <category term="carreira" scheme="http://yanmagalhaes.com.br/tags/carreira/"/>
    
      <category term="motivação" scheme="http://yanmagalhaes.com.br/tags/motivacao/"/>
    
  </entry>
  
</feed>
